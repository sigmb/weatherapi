/**
 * OpenWeatherMap API
 * Get the current weather, daily forecast for 16 days, and a three-hour-interval forecast for 5 days for your city. Helpful stats, graphics, and this day in history charts are available for your reference. Interactive maps show precipitation, clouds, pressure, wind around your location stations. Data is available in JSON, XML, or HTML format. **Note**: This sample Swagger file covers the `current` endpoint only from the OpenWeatherMap API. <br/><br/> **Note**: All parameters are optional, but you must select at least one parameter. Calling the API by city ID (using the `id` parameter) will provide the most precise location results.
 *
 * OpenAPI spec version: 2.5
 * Contact: some_email@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenWeatherMapApi);
  }
}(this, function(expect, OpenWeatherMapApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenWeatherMapApi.Model200();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Model200', function() {
    it('should create an instance of Model200', function() {
      // uncomment below and update the code to test Model200
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be.a(OpenWeatherMapApi.Model200);
    });

    it('should have the property base (base name: "base")', function() {
      // uncomment below and update the code to test the property base
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property clouds (base name: "clouds")', function() {
      // uncomment below and update the code to test the property clouds
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property cod (base name: "cod")', function() {
      // uncomment below and update the code to test the property cod
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property coord (base name: "coord")', function() {
      // uncomment below and update the code to test the property coord
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property dt (base name: "dt")', function() {
      // uncomment below and update the code to test the property dt
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property main (base name: "main")', function() {
      // uncomment below and update the code to test the property main
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property rain (base name: "rain")', function() {
      // uncomment below and update the code to test the property rain
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property snow (base name: "snow")', function() {
      // uncomment below and update the code to test the property snow
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property sys (base name: "sys")', function() {
      // uncomment below and update the code to test the property sys
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property visibility (base name: "visibility")', function() {
      // uncomment below and update the code to test the property visibility
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property weather (base name: "weather")', function() {
      // uncomment below and update the code to test the property weather
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

    it('should have the property wind (base name: "wind")', function() {
      // uncomment below and update the code to test the property wind
      //var instance = new OpenWeatherMapApi.Model200();
      //expect(instance).to.be();
    });

  });

}));
